#! /bin/bash

### BEGIN INIT INFO
# Provides:          tor
# Required-Start:    $local_fs $remote_fs $network $named $time
# Required-Stop:     $local_fs $remote_fs $network $named $time
# Should-Start:      $syslog
# Should-Stop:       $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts The Onion Router daemon processes
# Description:       Start The Onion Router, a TCP overlay
#                    network client that provides anonymous
#                    transport.
### END INIT INFO

set -e

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/sbin/tor
NAME=tor
DESC="tor daemon"
TORPIDDIR=/var/run/tor
TORPID=$TORPIDDIR/tor.pid
DEFAULTSFILE=/etc/default/$NAME
WAITFORDAEMON=60
ARGS=""
NUMPROCS=$(grep "^processor	" /proc/cpuinfo | wc -l | awk '{print $1}')
# Let's try to figure our some sane defaults:
if [ -r /proc/sys/fs/file-max ]; then
	system_max=`cat /proc/sys/fs/file-max`
	if [ "$system_max" -gt "80000" ] ; then
		MAX_FILEDESCRIPTORS=32768
	elif [ "$system_max" -gt "40000" ] ; then
		MAX_FILEDESCRIPTORS=16384
	elif [ "$system_max" -gt "10000" ] ; then
		MAX_FILEDESCRIPTORS=8192
	else
		MAX_FILEDESCRIPTORS=1024
		cat << EOF

Warning: Your system has very few filedescriptors available in total.

Maybe you should try raising that by adding 'fs.file-max=100000' to your
/etc/sysctl.conf file.  Feel free to pick any number that you deem appropriate.
Then run 'sysctl -p'.  See /proc/sys/fs/file-max for the current value, and
file-nr in the same directory for how many of those are used at the moment.

EOF
	fi
else
	MAX_FILEDESCRIPTORS=8192
fi

NICE=""

test -x $DAEMON || exit 0

# Include tor defaults if available
if [ -f $DEFAULTSFILE ] ; then
	. $DEFAULTSFILE
fi

set_one_up() {
	N=$1;
	RPORT=$((442 + $N));
	DIRPORT=$((79 + $N))
	DATADIR="/var/lib/tor${N}"
	PIDFILE="/var/run/tor/tor${N}.pid"
	mkdir -p $DATADIR;
	chown -R debian-tor $DATADIR;
	cp /opt/ops/configs/torrc /etc/tor/torrc.${i}
	sed -i "s/ORPort 443/ORPort $RPORT/g" /etc/tor/torrc.${N}
	sed -i "s/DirPort 80/DirPort $DIRPORT/g" /etc/tor/torrc.${N}
	sed -i "s/DataDirectory \/var\/lib\/tor/DataDirectory \/var\/lib\/tor${N}/g" /etc/tor/torrc.${N}
	sed -i "s/PidFile \/var\/run\/tor\/tor.pid/PidFile \/var\/run\/tor\/tor${N}.pid/g" /etc/tor/torrc.${N}
}

wait_for_deaddaemon () {
	pid=$1
	sleep 1
	if test -n "$pid"
	then
		if kill -0 $pid 2>/dev/null
		then
			echo -n "."
			cnt=0
			while kill -0 $pid 2>/dev/null
			do
				cnt=`expr $cnt + 1`
				if [ $cnt -gt $WAITFORDAEMON ]
				then
					echo " FAILED."
					return 1
				fi
				sleep 1
				echo -n "."
			done
		fi
	fi
	return 0
}

check_torpiddir () {
	if test ! -d $TORPIDDIR; then
		#echo "There is no $TORPIDDIR directory.  Creating one for you."
		mkdir -m 02750 "$TORPIDDIR"
		chown debian-tor:debian-tor "$TORPIDDIR"
	fi

	if test ! -x $TORPIDDIR; then
		echo "Cannot access $TORPIDDIR directory, are you root?" >&2
		exit 1
	fi
}

check_config () {
	if ! $DAEMON -f /etc/tor/torrc.$1 --verify-config > /dev/null; then
		echo "ABORTED: Tor $1 configuration invalid:" >&2
		$DAEMON -f /etc/tor/torrc.$1 --verify-config >&2
		exit 1
	fi
}


case "$1" in
  start)
	if [ "$RUN_DAEMON" != "yes" ]; then
		echo "Not starting $DESC (Disabled in $DEFAULTSFILE)."
		exit 0
	fi

	if [ -n "$MAX_FILEDESCRIPTORS" ]; then
		echo -n "Raising maximum number of filedescriptors (ulimit -n) to $MAX_FILEDESCRIPTORS"
		if ulimit -n "$MAX_FILEDESCRIPTORS" ; then
			echo "."
		else
			echo ": FAILED."
		fi
	fi

	check_torpiddir

	ERROR=0;

	for i in $(seq 1 $NUMPROCS); do
		if [ ! -f /etc/tor/torrc.${i} ]; then
			set_one_up $i;
		fi
		echo -n "Starting $DESC $i: $NAME "
		if [ -f /var/run/tor/tor${i}.pid ]; then
			echo "already running at pid $(cat /var/run/tor/tor${i}.pid)" >&2
			ERROR=1;
		else 
			ARGS="-f /etc/tor/torrc.${i}"
			check_config $i
			start-stop-daemon --start --quiet --oknodo \
				--pidfile $TORPID \
				$NICE \
				--exec $DAEMON -- $ARGS;

		fi
	done
	;;
  stop)
	echo "Stopping $DESC: "
	ERROR=0;
	for i in $(seq 1 $NUMPROCS); do
		echo -n "Stopping process $i: ";
		TORPID="$TORPIDDIR/tor${i}.pid";
		if test ! -f $TORPID; then
			echo "not running (there is no $TORPID)."
			exit 0
		fi
		pid=`cat $TORPID 2>/dev/null` || true

		if start-stop-daemon --stop --signal INT --quiet --pidfile $TORPID --exec $DAEMON; then
			wait_for_deaddaemon $pid
			echo "$NAME."

		elif kill -0 $pid 2>/dev/null
		then
			echo "FAILED (Is $pid not $NAME?  Is $DAEMON a different binary now?)."
		else
			echo "FAILED ($DAEMON died: process $pid not running; or permission denied)."
		fi
		done
	;;
  reload|force-reload)
	for i in $(seq 1 $NUMPROCS); do
		TORPID="$TORPIDDIR/tor${i}.pid";
		echo -n "Reloading $DESC $i configuration: "
		pid=`cat $TORPID 2>/dev/null` || true
	
		if test ! -f $TORPID -o -z "$pid"; then
			echo "not running (there is no $TORPID)."
			exit 0
		fi
	
		check_config
	
		if start-stop-daemon --stop --signal 1 --quiet --pidfile $TORPID --exec $DAEMON
		then
			echo "$NAME."
		elif kill -0 $pid 2>/dev/null
		then
			echo "FAILED (Is $pid not $NAME?  Is $DAEMON a different binary now?)."
		else
			echo "FAILED ($DAEMON died: process $pid not running; or permission denied)."
		fi
	done
	;;
  restart)
	$0 stop
	sleep 1
	$0 start
	;;
  status)
	for i in $(seq 1 $NUMPROCS); do
		TORPID="$TORPIDDIR/tor${i}.pid";
		if test ! -r $(dirname $TORPID); then
			echo "cannot read tor PID file"
			exit 4
		fi
		pid=`cat $TORPID 2>/dev/null` || true
		if test ! -f $TORPID -o -z "$pid"; then
			echo "tor is not running"
			exit 3
		fi
		if ps "$pid" >/dev/null 2>&1; then
			echo "tor is running"
			exit 0
		else
			echo "tor is not running"
			exit 1
		fi
	done
	;;
  *)
	echo "Usage: $0 {start|stop|restart|reload|force-reload|status}" >&2
	exit 1
	;;
esac

exit 0
